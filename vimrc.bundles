" ======================
" vim-plug插件配置与安装
" ======================

" =============== 依赖说明 ===============[[[1
" Python依赖: pip install flake8 pep8-naming isort jedi
" ]]]

" ================= 插件管理 =====================[[[1
if !exists('g:bundle_groups')  " inspired by spf13, 自定义需要的插件集合
    " \'latex',
    let g:bundle_groups=[
        \'python',
        \'beta',
        \'markdown',
        \'nginx',
        \]
endif

call plug#begin('~/.config/nvim/bundle')
    " 自动补全插件[[[2
        " 代码片段快速插入
        Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
        " 自动补全单引号，双引号等
        Plug 'Raimondi/delimitMate'
    " ]]]

    " 编辑插件[[[2
        " 快速注释
        Plug 'tpope/vim-commentary'
        " 快速加入修改环绕字符
        Plug 'tpope/vim-surround'
        " 快速去行尾空格
        Plug 'ntpeters/vim-better-whitespace'
        " 多光标选中编辑
        Plug 'terryma/vim-multiple-cursors'
        " 格式化Python
        Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
    " ]]]

    " 快速定位插件 [[[2
        " 文件内快速定位
        Plug 'easymotion/vim-easymotion'

        " fzf
        Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plug 'junegunn/fzf.vim'
    " ]]]

    " 功能插件[[[2
        Plug 'tpope/vim-fugitive'
    " ]]]

    " 显示插件[[[2
        " 括号显示增强
        Plug 'kien/rainbow_parentheses.vim'
        " 主题 solarized
        Plug 'altercation/vim-colors-solarized'

        " 显示Mark
        Plug 'kshenoy/vim-signature'
    " ]]]

    " 导航插件[[[2
        " nerdtree nerdtreetabs
        Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs'
        " tagbar
        Plug 'majutsushi/tagbar'
    " ]]]

    " 语言相关[[[2
        " markdown[[[3
        if count(g:bundle_groups, 'markdown')
            Plug 'plasticboy/vim-markdown', {'for': 'md'}
        endif
        " ]]]

        " Python[[[3
        if count(g:bundle_groups, 'python')
            " for python.vim syntax highlight
            " pythonsyntax
            Plug 'hdima/python-syntax'
        endif
        " ]]]

        " Nginx[[[3
        if count(g:bundle_groups, 'nginx')
            Plug 'bwangel23/nginx-vim-syntax'
        endif
        " ]]]
    " ]]]
    if count(g:bundle_groups, 'beta')
    endif
call plug#end()
" ]]]

" ==================== 插件配置 ========================[[[1
    " 自动补全插件[[[2
        " ultisnips [[[3
            let g:UltiSnipsExpandTrigger       = "<tab>"
            " 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
            let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
            " 进入对应filetype的snippets进行编辑
            map <leader>n :UltiSnipsEdit<CR>

            " ctrl+j/k 进行选择
            func! g:JInYCM()
                if pumvisible()
                    return "\<C-n>"
                else
                    return "\<c-j>"
                endif
            endfunction

            func! g:KInYCM()
                if pumvisible()
                    return "\<C-p>"
                else
                    return "\<c-k>"
                endif
            endfunction
            inoremap <c-j> <c-r>=g:JInYCM()<cr>
            au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
            let g:UltiSnipsJumpBackwordTrigger = "<c-k>"
        " ]]]
        " delimitMate [[[3
            " for python docstring ",优化输入
            au FileType python let b:delimitMate_nesting_quotes = ['"']
            au FileType php let delimitMate_matchpairs = "(:),[:],{:}"
            " 关闭某些类型文件的自动补全
            "au FileType mail let b:delimitMate_autoclose = 0
        " ]]]
    " ]]]

    " 编辑插件[[[2
        " vim-commentary [[[3
            autocmd FileType nginx setlocal commentstring=#\ %s
            autocmd FileType sql setlocal commentstring=--\ %s
            autocmd FileType awk setlocal commentstring=#\ %s
        " ]]]
        " trailingwhitespace [[[
            map <leader>t :StripWhitespace<CR>
            autocmd FileType c,cpp,java,go,puppet,python,rust,twig,xml,yml,perl autocmd BufEnter <buffer> EnableStripWhitespaceOnSave
        " ]]]
        " multiplecursors [[[3
            let g:multi_cursor_use_default_mapping=0
            " Default mapping
            let g:multi_cursor_next_key='<C-m>'
            let g:multi_cursor_prev_key='<C-p>'
            let g:multi_cursor_skip_key='<C-x>'
            let g:multi_cursor_quit_key='<Esc>'
        " ]]]
        " yapf [[[3
            autocmd FileType python nnoremap <leader>y :0,$!yapf<Cr>
            autocmd FileType python vnoremap <leader>y :!yapf<Cr>
        " ]]]
    " ]]]
    " 快速定位插件[[[2
        " vim-easymotion [[[3
            let g:EasyMotion_smartcase = 1
            map <leader>j <Plug>(easymotion-j)
            map <leader>k <Plug>(easymotion-k)
            " 重复上一次操作, 类似repeat插件, 很强大
            map <leader>. <Plug>(easymotion-repeat)
        " ]]]
        " fzf [[[3
            nmap <leader>p :FZF<CR>
            nnoremap <Leader>q :Ag<Space>
            xnoremap <silent> <Leader>q y:Ag <C-R>"<CR>
            nnoremap <silent> <Leader>` :Marks<CR>
        " ]]]
        " fzf.vim[[[3
            " 显示所有Buffer
            nnoremap <leader>p :Files<CR>
            nnoremap <silent> <Leader>l  :Buffers<CR>
            nnoremap <leader>m :Maps<CR>
            nnoremap <silent> <Leader><Enter>        :BLines<CR>
            nnoremap <leader>c :Commits<CR>
            nnoremap <leader>h :BTags<CR>
            let g:fzf_layout = { 'window': '-tabnew', 'down': '~40%' }
            let g:fzf_colors =
            \ { 'fg':      ['fg', 'Normal'],
                \ 'bg':      ['bg', 'Normal'],
                \ 'hl':      ['fg', 'Comment'],
                \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
                \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
                \ 'hl+':     ['fg', 'Statement'],
                \ 'info':    ['fg', 'PreProc'],
                \ 'border':  ['fg', 'Ignore'],
                \ 'prompt':  ['fg', 'Conditional'],
                \ 'pointer': ['fg', 'Exception'],
                \ 'marker':  ['fg', 'Keyword'],
                \ 'spinner': ['fg', 'Label'],
                \ 'header':  ['fg', 'Comment'] }
        " ]]]
    " ]]]
    " 功能插件[[[2
        " vim-fugitive [[[3
            " :Gdiff  :Gstatus :Gvsplit
            nnoremap <leader>ge :Gdiff<CR>
        " ]]]
    " ]]]

    " 显示插件[[[2
        " rainbow_parentheses [[[3
            " 不加入这行, 防止黑色括号出现, 很难识别
            " \ ['black',       'SeaGreen3'],
            let g:rbpt_colorpairs = [
                \ ['brown',       'RoyalBlue3'],
                \ ['Darkblue',    'SeaGreen3'],
                \ ['darkgray',    'DarkOrchid3'],
                \ ['darkgreen',   'firebrick3'],
                \ ['darkcyan',    'RoyalBlue3'],
                \ ['darkred',     'SeaGreen3'],
                \ ['darkmagenta', 'DarkOrchid3'],
                \ ['brown',       'firebrick3'],
                \ ['gray',        'RoyalBlue3'],
                \ ['darkmagenta', 'DarkOrchid3'],
                \ ['Darkblue',    'firebrick3'],
                \ ['darkgreen',   'RoyalBlue3'],
                \ ['darkcyan',    'SeaGreen3'],
                \ ['darkred',     'DarkOrchid3'],
                \ ['red',         'firebrick3'],
                \ ]

            let g:rbpt_max = 16
            let g:rbpt_loadcmd_toggle = 0
            au VimEnter * RainbowParenthesesToggle
            au Syntax * RainbowParenthesesLoadRound
            au Syntax * RainbowParenthesesLoadSquare
            au Syntax * RainbowParenthesesLoadBraces
        " ]]]
        " solarized [[[3
            let g:solarized_termtrans=1
            let g:solarized_contrast="normal"
            let g:solarized_visibility="normal"
        " ]]]
    " ]]]

    " 导航插件[[[2
        " nerdtree nerdtreetabs [[[3
            function! ChangeDirIntoCurrentBuffer()
                cd %:p:h
                NERDTreeCWD
            endfunction

            noremap <F3> :NERDTreeToggle<CR>
            noremap <leader>o :call ChangeDirIntoCurrentBuffer()<CR>
            let NERDTreeHighlightCursorline=1
            " 自动删除掉通过NERDTree删除的文件的Buffer
            let NERDTreeAutoDeleteBuffer=1
            " 设置NERDTree要忽略的文件
            let NERDTreeIgnore=[ '__pycache__$[[dir]]', 'node_modules$', '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', '^venv$' ]
            "close vim if the only window left open is a NERDTree
            autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
            " s/v 分屏打开文件
            let g:NERDTreeMapOpenSplit = 's'
            let g:NERDTreeMapOpenVSplit = 'v'

            " nerdtreetabs
            " 关闭同步
            " let g:nerdtree_tabs_synchronize_view=0
            " let g:nerdtree_tabs_synchronize_focus=0
            " 是否自动开启nerdtree
            let g:nerdtree_tabs_open_on_console_startup=0
            let g:nerdtree_tabs_open_on_gui_startup=0
        " ]]]
        " tagbar [[[3
            nmap <F8> :TagbarToggle<CR>
            let g:tagbar_width = 54
            let g:tagbar_sort = 0
            let g:tagbar_indent = 1
            let g:tagbar_compact = 1
            let g:tagbar_silent = 1
            let g:tagbar_iconchars = ['▸', '▾']

            " go语言的tagbar配置
            " 1. install gotags 'go get -u github.com/jstemmer/gotags'
            " 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
            " for gotags. work with tagbar
            let g:tagbar_type_go = {
                \ 'ctagstype' : 'go',
                \ 'kinds'     : [
                    \ 'p:package',
                    \ 'i:imports:1',
                    \ 'c:constants',
                    \ 'v:variables',
                    \ 't:types',
                    \ 'n:interfaces',
                    \ 'w:fields',
                    \ 'e:embedded',
                    \ 'm:methods',
                    \ 'r:constructor',
                    \ 'f:functions'
                \ ],
                \ 'sro' : '.',
                \ 'kind2scope' : {
                    \ 't' : 'ctype',
                    \ 'n' : 'ntype'
                \ },
                \ 'scope2kind' : {
                    \ 'ctype' : 't',
                    \ 'ntype' : 'n'
                \ },
                \ 'ctagsbin'  : 'gotags',
                \ 'ctagsargs' : '-sort -silent'
            \ }
        " ]]]
    " ]]]

    " 语言相关[[[2
        " pythonsyntax [[[3
            let python_highlight_all = 1
        " ]]]
    " ]]]
" ]]]


" vim:fdm=marker:fmr=[[[,]]]
" vim:foldlevel=99
